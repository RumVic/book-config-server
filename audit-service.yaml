server:
  port: 8686
spring:
  application:
    name: book-audit
  # cloud:
  #   consul:
  #     host: consul
  #     port: 8500
  #     discovery:
  #       enabled: true  # Enable service discovery
  #       # service-name: book-audit  # Optional: Custom service name
  #       # # health-check-url: http://book-audit:8686/actuator/health
  #       # health-check-url: http://book-audit:8686/actuator/health
  #       # # instance-id: ${spring.application.name}:${random.value}:${server.port}
  #       # instance-id: book-audit:8686
  #       # prefer-ip-address: false
  #       # register: true
  #       # # ${spring.application.name}:${spring.cloud.client.hostname}:${server.port}s
  #       register: true  # Enable service registration
  #       instanceId: ${spring.application.name}:${server.port}
  #       healthCheckUrl: http://book-audit:8686/actuator/health  # URL for health check
  #       healthCheckInterval: 15s  # Interval for health check
  #       preferIpAddress: false  # Use service name instead of IP address
  #       service-name: ${spring.application.name}  # Custom service name (optional)
  #mongo
  data:
    mongodb:
      uri: mongodb://mongo:27017/books_audit
      username: mongodb
      password: admin
      database: image_books
      profiles:
        active: dev
  kafka:
    bootstrap-servers: kafka1:29092
    consumer:
      # group-id: my-group
      group-id: stream-processing-app
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer

management:
  endpoints:
    web:
      exposure:
        include: health
logging:
  level:
    org.apache.kafka: debug
    org.springframework.data.mongodb.core: debug
    # org.springframework.cloud.consul: DEBUG